# Generated by Django 4.0.3 on 2022-05-19 21:11

import datetime
from django.db import migrations, models
import django.db.models.deletion
from django.utils.timezone import utc


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='ClipType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('clip_type', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='ConstructionType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('construction_type', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='CordType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cord_type', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='CultivationType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cultivation_type', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='EnergyScreenBrand',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('energy_screen_brand', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='EnergySourceType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('energysource_type', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='FertilizerType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fertilizer_type', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='FruitWeight',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fruit_weight', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='GreenhouseName',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('greenhouse_name', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='GreenhouseOperator',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('mail', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='LightingType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lighting_type', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='PackagingType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('packaging_type', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='PesticideType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pesticide_type', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='PowerMixType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('powermix_type', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='ProductionType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('production_type', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='RoofingMaterial',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('roofing_material', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='SubstrateType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('substrate_type', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='GreenhouseData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datetime', models.DateTimeField(default=datetime.datetime(2022, 5, 19, 21, 11, 40, 837168, tzinfo=utc))),
                ('session_key', models.CharField(max_length=50, null=True, unique=True)),
                ('location', models.IntegerField()),
                ('greenhouse_age', models.SmallIntegerField()),
                ('standing_wall_height', models.DecimalField(decimal_places=3, max_digits=6)),
                ('total_area', models.DecimalField(decimal_places=3, max_digits=8)),
                ('closing_time_begin', models.TimeField(null=True)),
                ('closing_time_end', models.TimeField(null=True)),
                ('drop_per_bag', models.DecimalField(decimal_places=3, max_digits=10)),
                ('greenhouse_area', models.DecimalField(decimal_places=3, max_digits=8)),
                ('plantation_begin', models.DateField()),
                ('plantation_duration', models.DecimalField(decimal_places=2, max_digits=6)),
                ('planting_density', models.DecimalField(decimal_places=3, max_digits=10)),
                ('harvest', models.DecimalField(decimal_places=3, max_digits=10)),
                ('energy_usage', models.DecimalField(decimal_places=3, max_digits=10)),
                ('lighting_power', models.DecimalField(decimal_places=3, max_digits=10)),
                ('lighting_runtime_per_day', models.DecimalField(decimal_places=3, max_digits=5)),
                ('powerusage_total_without_lighting', models.DecimalField(decimal_places=3, max_digits=10)),
                ('co2_consumption', models.DecimalField(decimal_places=3, max_digits=10)),
                ('fertilizer_amount', models.DecimalField(decimal_places=3, max_digits=10)),
                ('pesticide_amount', models.DecimalField(decimal_places=3, max_digits=10)),
                ('used_materials_substrate_plantsperbag', models.DecimalField(decimal_places=3, max_digits=10)),
                ('used_materials_substrate_bagpersqm', models.DecimalField(decimal_places=3, max_digits=10)),
                ('used_materials_gutter_count', models.DecimalField(decimal_places=3, max_digits=10)),
                ('used_materials_gutter_length', models.DecimalField(decimal_places=3, max_digits=10)),
                ('used_materials_foils_area', models.DecimalField(decimal_places=3, max_digits=10)),
                ('youngplants_travelling_distance', models.DecimalField(decimal_places=3, max_digits=10)),
                ('post_harvest_packaging_amount', models.DecimalField(decimal_places=3, max_digits=10)),
                ('post_harvest_transport_distance', models.DecimalField(decimal_places=3, max_digits=10)),
                ('electric_power_co2', models.DecimalField(decimal_places=3, max_digits=10)),
                ('heat_consumption_co2', models.DecimalField(decimal_places=3, max_digits=10)),
                ('psm_co2', models.DecimalField(decimal_places=3, max_digits=10)),
                ('fertilizer_co2', models.DecimalField(decimal_places=3, max_digits=10)),
                ('construction_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='backend.constructiontype')),
                ('cultivation_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='backend.cultivationtype')),
                ('energy_screen_brand', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='backend.energyscreenbrand')),
                ('energysource_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='backend.energysourcetype')),
                ('fertilizer_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='backend.fertilizertype')),
                ('fruit_weight', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='backend.fruitweight')),
                ('greenhouse_name', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='backend.greenhousename')),
                ('greenhouse_operator', models.ForeignKey(default=1, on_delete=django.db.models.deletion.SET_DEFAULT, to='backend.greenhouseoperator')),
                ('pesticide_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='backend.pesticidetype')),
                ('post_harvest_packaging_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='backend.packagingtype')),
                ('powermix_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='backend.powermixtype')),
                ('powerusage_lighting_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='backend.lightingtype')),
                ('production_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='backend.productiontype')),
                ('roofing_material', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='backend.roofingmaterial')),
                ('used_materials_clip_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='backend.cliptype')),
                ('used_materials_cord_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='backend.cordtype')),
                ('used_materials_substrate_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='backend.substratetype')),
            ],
        ),
    ]
