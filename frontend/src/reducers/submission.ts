/**
 * #############################################################################
 * submission.ts: Defines reducers to dispatch actions generated by ../actions/submission.ts
 * #############################################################################
 */
import {
    RESET_DATA,
    SUBMISSION_ERROR,
    SUBMISSION_INPROGRESS, SUBMISSION_RESET,
    SUBMISSION_SUCCESS
} from "../types/reduxTypes";

/**
 * @type SubmissionState
 *
 * Contains the status of the current submission.
 *
 * @property {boolean} inProgress - True, when the submission is still in progress
 * @property {boolean|null} successful - True, when data was submitted successfully
 */
export type SubmissionState = {
    inProgress: boolean
    successful: boolean | null
}

// Initialize sumbission state
const initialState: SubmissionState = {
    inProgress: false,
    successful: null
}

/**
 * Dispatches any actions related to the submission of data.
 *
 * @param state - The current submission state
 * @param action - The action to dispatch
 *
 * @returns The updated submission state
 */
export default function (state: SubmissionState = initialState, action: any): SubmissionState {
    switch (action.type) {
        case SUBMISSION_INPROGRESS:
            return {
                ...state,
                inProgress: true,
                successful: null
            }
        case SUBMISSION_SUCCESS:
            return {
                ...state,
                inProgress: false,
                successful: true
            }
        case SUBMISSION_ERROR:
            return {
                ...state,
                inProgress: false,
                successful: false
            }
        case SUBMISSION_RESET:
        case RESET_DATA:
            return initialState
        default:
            return state;
    }
}