/**
 * #############################################################################
 * weather.ts: Defines reducers to dispatch actions generated by ../actions/weather.ts
 * #############################################################################
 */

import {
    RESET_DATA,
    WEATHER_ERROR,
    WEATHER_LOADED,
    WEATHER_LOADING,
    WeatherData,
} from "../types/reduxTypes";

/**
 * @type WeatherState
 *
 * Contains the weather data, which was requested from the weather api-endpoint.
 *
 * @property {boolean} isLoading - True, while the data is loaded from the server
 * @property {WeatherData|null} weatherData - The received weather-data
 */
export type WeatherState = {
    isLoading: boolean
    weatherData: WeatherData | null
}

// Initialize the weather state
const initialState: WeatherState = {
    isLoading: false,
    weatherData: null
}

/**
 * Dispatches any actions related to the state of retrieved weather data
 *
 * @param state - The current weather state
 * @param action - The action to dispatch
 *
 * @returns The updated weather state
 */
export default function (state: WeatherState = initialState, action: any): WeatherState {
    switch (action.type) {
        case WEATHER_LOADING:
            return {
                ...state,
                isLoading: true
            };
        case WEATHER_LOADED:
            return {
                ...state,
                isLoading: false,
                weatherData: action.payload
            };
        case WEATHER_ERROR:
            return {
                ...state,
                isLoading: false,
                weatherData: null
            };
        case RESET_DATA:
            return initialState
        default:
            return state;
    }
}