/**
 * #############################################################################
 * dataset.ts: Defines reducers to dispatch actions generated by ../actions/dataset.ts
 * #############################################################################
 */
import {
    DATASET_ERROR,
    DATASET_LOADED,
    DATASET_LOADING, GreenhouseData,
    RESET_DATA,
} from "../types/reduxTypes";

/**
 * @type DatasetState
 *
 * Contains the status of the current submission.
 *
 * @property {boolean} inProgress - True, when the dataset fetching is still in progress
 * @property {boolean|null} successful - True, when data was fetched successfully
 */

export type DatasetState = {
    inProgress: boolean
    successful: boolean | null
    datasets: GreenhouseData[]
}


// Initialize sumbission state
const initialState: DatasetState = {
    inProgress: false,
    successful: null,
    datasets: []

}

/**
 * Dispatches any actions related to the submission of data.
 *
 * @param state - The current dataset state
 * @param action - The action to dispatch
 *
 * @returns The updated dataset state
 */
export default function (state: DatasetState = initialState, action: any): DatasetState {
    switch (action.type) {
        case DATASET_LOADING:
            return {
                ...state,
                inProgress: true,
                successful: null
            }
        case DATASET_LOADED:
            return {
                ...state,
                inProgress: false,
                successful: true,
                datasets: action.payload
            }
        case DATASET_ERROR:
            return {
                ...state,
                inProgress: false,
                successful: false,
                datasets: []
            }
        case RESET_DATA:
            return initialState
        default:
            return state;
    }
}