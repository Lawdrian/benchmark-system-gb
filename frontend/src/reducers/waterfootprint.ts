/**
 * #############################################################################
 * waterfootprint.ts: Defines reducers to dispatch actions generated by ../actions/waterfootprint.ts
 * #############################################################################
 */
import {
    GreenhouseFootprint,
    RESET_DATA,
    WATERFP_ERROR,
    WATERFP_LOADED,
    WATERFP_LOADING
} from "../types/reduxTypes";

/**
 * @type WaterFootprintState
 *
 * Contains the necessary data to visualize the water-footprint
 *
 * @property {boolean} [isLoading] - True, while the data is loaded from the server
 * @property {GreenhouseFootprint[]} - The data to create the plot
 */
export type WaterFootprintState = {
    isLoading: boolean
    plotData: GreenhouseFootprint[]
}

// Initialize the water-footprint state
const initialState: WaterFootprintState = {
    isLoading: false,
    plotData: []
}

/**
 * Dispatches any actions related to the water-footprint state.
 *
 * @param state - The current water-footprint state
 * @param action - The action to dispatch
 *
 * @returns The updated weather state
 */
export default function (state: WaterFootprintState = initialState, action: any): WaterFootprintState {
    switch (action.type) {
        case WATERFP_LOADING:
            return {
                ...state,
                isLoading: true
            };
        case WATERFP_LOADED:
            return {
                ...state,
                isLoading: false,
                plotData: action.payload
            };
        case WATERFP_ERROR:
            return {
                ...state,
                isLoading: false,
                plotData: []
            };
        case RESET_DATA:
            return initialState
        default:
            return state;
    }
}