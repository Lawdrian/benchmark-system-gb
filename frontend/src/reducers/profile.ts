/**
 * #############################################################################
 * profile.ts: Defines reducers to dispatch actions generated by ../actions/profile.ts
 * #############################################################################
 */
import {
    PROFILE_ERROR, PROFILE_LOADED, PROFILE_LOADING, ProfileData, RESET_DATA,
} from "../types/reduxTypes";
import {DatasetState} from "./dataset";

/**
 * @type ProfileDataState
 *
 * Contains the status and data of fetching the profile data of a user from the database.
 *
 * @property {boolean} inProgress - True, when the profile data fetching is still in progress
 * @property {boolean|null} successful - True, when data was fetched successfully
 * @property profileData - List of profile data
 */
export type ProfileDataState = {
    inProgress: boolean
    successful: boolean | null
    profileData: ProfileData[]
}

// initialize sumbission state
const initialState: ProfileDataState = {
    inProgress: false,
    successful: null,
    profileData: []
}

/**
 * Dispatches any actions related to the fetching of data.
 *
 * @param state - The current profile state
 * @param action - The action to dispatch
 *
 * @returns The updated profile state
 */
export default function (state: ProfileDataState = initialState, action: any): ProfileDataState {
    switch (action.type) {
        case PROFILE_LOADING:
            return {
                ...state,
                inProgress: true,
                successful: null
            }
        case PROFILE_LOADED:
            return {
                ...state,
                inProgress: false,
                successful: true,
                profileData: action.payload
            }
        case PROFILE_ERROR:
            return {
                ...state,
                inProgress: false,
                successful: false,
                profileData: []
            }
        case RESET_DATA:
            return initialState
        default:
            return state;
    }
}