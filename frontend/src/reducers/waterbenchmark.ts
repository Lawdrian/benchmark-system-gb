/**
 * #############################################################################
 * waterbenchmark.ts: Defines reducers to dispatch actions generated by ../actions/waterbenchmark.ts
 * #############################################################################
 */
import {
    GreenhouseBenchmark,
    RESET_DATA,
    WATERBM_ERROR,
    WATERBM_LOADED,
    WATERBM_LOADING
} from "../types/reduxTypes";

/**
 * @type WaterBenchmarkState
 *
 * Contains the necessary data to visualize the water-benchmark.
 *
 * @property {boolean} isLoading - True, while the water benchmark data is loaded from the server
 * @property {GreenhouseBenchmark[]} plotData - The data to create the water-benchmark plot
 */
export type WaterBenchmarkState = {
    isLoading: boolean
    plotData: GreenhouseBenchmark[]
}

// Initialize the water-benchmark state
const initialState: WaterBenchmarkState = {
    isLoading: false,
    plotData: []
}

/**
 * Dispatches any actions related to the water-benchmark data
 *
 * @param state - The current water-benchmark state
 * @param action - The action to dispatch
 */
export default function (state: WaterBenchmarkState = initialState, action: any): WaterBenchmarkState {
    switch (action.type) {
        case WATERBM_LOADING:
            return {
                ...state,
                isLoading: true
            };
        case WATERBM_LOADED:
            return {
                ...state,
                isLoading: false,
                plotData: action.payload
            };
        case WATERBM_ERROR:
            return {
                ...state,
                isLoading: false,
                plotData: []
            };
        case RESET_DATA:
            return initialState
        default:
            return state;
    }
}