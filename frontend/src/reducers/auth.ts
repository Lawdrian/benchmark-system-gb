/**
 * #############################################################################
 * auth.ts: Defines reducers to dispatch actions generated by ../actions/auth.ts
 * #############################################################################
 */
import {
    ACTIVATE_FAIL, ACTIVATE_LOADING,
    ACTIVATE_SUCCESS,
    AUTH_ERROR, DELETE_SUCCESS,
    LOGIN_FAIL,
    LOGIN_SUCCESS,
    LOGOUT_SUCCESS,
    REGISTER_FAIL,
    REGISTER_SUCCESS,
    User,
    USER_LOADED,
    USER_LOADING
} from "../types/reduxTypes";

/**
 * @type AuthenticationState
 *
 * Contains the authentication status of the current user.
 * A user is authenticated if it has a valid token active.
 *
 * @property {string | null} [token] - The authentication token
 * @property {boolean} [isAuthenticated] - True, when there is an authenticated user active
 * @property {boolean} [isLoading] - True, while retrieving the current user from the server
 * @property {User | null} [user] - The current active user
 */
export type AuthenticationState = {
    token: string | null
    isAuthenticated: boolean
    isLoading: boolean
    user: User | null
    isActivated: boolean | null
}

// initialize the authentication state
const initialState: AuthenticationState = {
    token: localStorage.getItem('token'),
    isAuthenticated: false,
    isLoading: false,
    user: null,
    isActivated: null,
}

/**
 * Dispatches any actions related to user authentication.
 *
 * @param state - The current authentication state
 * @param action - The action to dispatch
 * @returns The updated authentication state
 */
export default function (state = initialState, action: any): AuthenticationState {
    switch (action.type) {
        case USER_LOADING:
        case ACTIVATE_LOADING:
            return {
                ...state,
                isLoading: true
            };
        case USER_LOADED:
            return {
                ...state,
                isAuthenticated: true,
                isLoading: false,
                user: action.payload,
            };
        case LOGIN_SUCCESS:
            localStorage.setItem('token', action.payload.token)
            return {
                ...state,
                ...action.payload,
                isAuthenticated: true,
                isLoading: false,
                isActivationError: true
            }
        case REGISTER_SUCCESS:
        case AUTH_ERROR:
        case LOGIN_FAIL:
        case LOGOUT_SUCCESS:
        case REGISTER_FAIL:
        case DELETE_SUCCESS:
            localStorage.removeItem('token')
            return {
                ...state,
                token: null,
                user: null,
                isAuthenticated: false,
                isLoading: false,
            };
        case ACTIVATE_SUCCESS:
            return {
                ...state,
                isActivated: true,
                isLoading: false,
            }
        case ACTIVATE_FAIL:
            return {
                ...state,
                isActivated: false,
                isLoading: false,
            }
        default:
            return state;
    }
}
