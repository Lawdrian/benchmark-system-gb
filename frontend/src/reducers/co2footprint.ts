/**
 * #############################################################################
 * co2footprint.ts: Defines reducers to dispatch actions generated by ../actions/co2footprint.ts
 * #############################################################################
 */
import {
    CO2FP_ERROR,
    CO2FP_LOADED,
    CO2FP_LOADING, GreenhouseBenchmark,
    GreenhouseFootprint,
    RESET_DATA
} from "../types/reduxTypes";

/**
 * @type CO2FootprintState
 *
 * Contains the necessary data to visualize the co2-footprint.
 * @property {boolean} [isLoading] - True, while the data is loaded from the server
 * @property {GreenhouseFootprint[]} [plotData] - The data to create the plot
 */
export type CO2FootprintState = {
    isLoading: boolean
    total: GreenhouseFootprint[]
    normalizedkg: GreenhouseFootprint[]
    normalizedm2: GreenhouseFootprint[]
    fruitsizekg: GreenhouseFootprint[]
    fruitsizem2: GreenhouseFootprint[]
    benchmarkkg: GreenhouseBenchmark[]
    benchmarkm2: GreenhouseBenchmark[]
}

// initialize the co2-footprint state
const initialState: CO2FootprintState = {
    isLoading: false,
    total: [],
    normalizedkg: [],
    normalizedm2: [],
    fruitsizekg: [],
    fruitsizem2: [],
    benchmarkkg: [],
    benchmarkm2: []
}

/**
 * Dispatches any actions related to the co2-footprint state.
 *
 * @param state - The current co2-footprint state
 * @param action - The action to dispatch
 * @returns The updated co2-footprint state
 */
export default function (state: CO2FootprintState = initialState, action: any): CO2FootprintState {
    switch (action.type) {
        case CO2FP_LOADING:
            return {
                ...state,
                isLoading: true
            };
        case CO2FP_LOADED:
            console.log("CO2-Plot Data:", action.payload1)
            console.log("CO2-Benchmark Data:", action.payload6)
            console.log("CO2-FruitSize-Plot Data:", action.payload3)
            return {
                ...state,
                isLoading: false,
                total: action.payload1,
                normalizedkg: action.payload2,
                normalizedm2: action.payload3,
                fruitsizekg: action.payload4,
                fruitsizem2: action.payload5,
                benchmarkkg: action.payload6,
                benchmarkm2: action.payload7
            };
        case CO2FP_ERROR:
        case RESET_DATA:
            return initialState
        default:
            return state;
    }
}