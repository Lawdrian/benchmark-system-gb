/**
 * #############################################################################
 * h2ofootprint.ts: Defines reducers to dispatch actions generated by ../actions/h2ofootprint.ts
 * #############################################################################
 */
import {
    GreenhouseFootprint,
    RESET_DATA,
    H2OFP_ERROR,
    H2OFP_LOADED,
    H2OFP_LOADING, GreenhouseBenchmark
} from "../types/reduxTypes";

/**
 * @type H2OFootprintState
 *
 * Contains the necessary data to visualize the h2o-footprint
 *
 * @property {boolean} [isLoading] - True, while the data is loaded from the server
 * @property {GreenhouseFootprint[]} - The data to create the plot
 */
export type H2OFootprintState = {
    isLoading: boolean
    total: GreenhouseFootprint[]
    normalizedkg: GreenhouseFootprint[]
    normalizedm2: GreenhouseFootprint[]
    fruitsizekg: GreenhouseFootprint[]
    fruitsizem2: GreenhouseFootprint[]
    benchmarkkg: GreenhouseBenchmark[]
    benchmarkm2: GreenhouseBenchmark[]
}

// Initialize the water-footprint state
const initialState: H2OFootprintState = {
    isLoading: false,
    total: [],
    normalizedkg: [],
    normalizedm2: [],
    fruitsizekg: [],
    fruitsizem2: [],
    benchmarkkg: [],
    benchmarkm2: []
}

/**
 * Dispatches any actions related to the h2o-footprint state.
 *
 * @param state - The current water-footprint state
 * @param action - The action to dispatch
 *
 * @returns The updated weather state
 */
export default function (state: H2OFootprintState = initialState, action: any): H2OFootprintState {
    switch (action.type) {
        case H2OFP_LOADING:
            return {
                ...state,
                isLoading: true
            };
        case H2OFP_LOADED:
            return {
                ...state,
                isLoading: false,
                total: action.payload1,
                normalizedkg: action.payload2,
                normalizedm2: action.payload3,
                fruitsizekg: action.payload4,
                fruitsizem2: action.payload5,
                benchmarkkg: action.payload6,
                benchmarkm2: action.payload7
            };
        case H2OFP_ERROR:
        case RESET_DATA:
            return initialState
        default:
            return state;
    }
}